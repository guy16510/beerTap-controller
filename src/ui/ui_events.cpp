/**
 * Beer Tap UI Events Implementation
 * 
 * This file implements callbacks for UI events generated by the SquareLine Studio
 * design. It handles WiFi configuration, QR code generation, and other UI interactions.
 */

 #include "ui.h"
 #include "wifi_config_helper.h"
 #include <lvgl.h>
 #include <Arduino.h>
 #include "gfx_conf.h"      // for LGFX tft
 #include <lv_qrcode.h>
 
 extern LGFX tft;
 
 //=== UI Helpers and State Variables ===//
 static lv_obj_t* qr_code = nullptr;         // QR code widget instance
 static lv_obj_t* qr_background = nullptr;   // QR background for better visibility
 
 /**
  * Generate QR code after a short delay 
  * (allows screen to fully load first)
  */
 static void delayed_qr_code_gen(lv_timer_t* timer) {
     // Configuration payload - this could be retrieved from WiFi settings
     // Format could be: SSID|IP|ID for your specific application needs
     String wifi_info;
     if (WiFi.status() == WL_CONNECTED) {
         wifi_info = String("SSID: ") + WiFi.SSID() + 
                     "\nIP: " + WiFi.localIP().toString() +
                     "\nID: BEERTAP1";
     } else {
         wifi_info = "BeerTap Device\nNot connected to WiFi";
     }
     
     const char* payload = wifi_info.c_str();
     Serial.printf("[QR] Generating QR code with payload: %s\n", payload);
 
     // Delete previous QR code if exists
     if (qr_background) lv_obj_del(qr_background);
     if (qr_code) lv_obj_del(qr_code);
     
     // Create QR code container with white background for better scanning
     if (!ui_QRCodeContainer) return;
     
     // Get container dimensions
     lv_coord_t w = lv_obj_get_width(ui_QRCodeContainer);
     lv_coord_t h = lv_obj_get_height(ui_QRCodeContainer);
     if (w <= 0 || h <= 0) { 
         w = 280; h = 280; // Default size if we can't get container size
     }
     
     // Create white background
     qr_background = lv_obj_create(ui_QRCodeContainer);
     lv_obj_remove_style_all(qr_background);
     lv_obj_set_size(qr_background, w, h);
     lv_obj_set_style_bg_color(qr_background, lv_color_white(), 0);
     lv_obj_set_style_bg_opa(qr_background, 255, 0);
     lv_obj_center(qr_background);
     
     // Create QR code on white background 
     qr_code = lv_qrcode_create(ui_QRCodeContainer, w - 40, lv_color_black(), lv_color_white());
     lv_obj_center(qr_code);
     lv_qrcode_update(qr_code, payload, strlen(payload));
     
     Serial.printf("[QR] Generated %dx%d QR code\n", w, h);
 }
 
 /**
  * Update WiFi status icons and text
  */
 static void update_wifi_status(lv_obj_t* label) {
     if (!label) return;
     
     if (WiFi.status() == WL_CONNECTED) {
         // Show WiFi signal strength icon based on RSSI
         int rssi = WiFi.RSSI();
         if (rssi > -50) {
             lv_label_set_text(label, LV_SYMBOL_WIFI);  // Strong signal
         } else if (rssi > -70) {
             lv_label_set_text(label, LV_SYMBOL_WIFI);  // Medium signal (use same icon)
         } else {
             lv_label_set_text(label, LV_SYMBOL_WIFI);  // Weak signal (use same icon)
         }
     } else {
         lv_label_set_text(label, LV_SYMBOL_CLOSE);  // Not connected
     }
 }
 
 //=== Event Handlers ===//
 
 /**
  * QR Code screen load event - generates QR code
  */
 extern "C" void on_QRCodeScreen_load(lv_event_t* e) {
     (void)e; // Unused parameter
     Serial.println("[QR] Screen load event triggered");
     
     // Generate QR code after a short delay to allow screen to load
     lv_timer_t* timer = lv_timer_create(delayed_qr_code_gen, 50, nullptr);
     lv_timer_set_repeat_count(timer, 1);
 }
 
 /**
  * Scan WiFi networks and populate dropdown
  */
 extern "C" void start_wifi_scan(lv_event_t* e) {
     (void)e; // Unused parameter
     Serial.println("[WiFi] Manual scan requested");
     
     if (!ui_wifiNetworksAvailable || !ui_wifiLoadingSpinner) return;
     
     // Show loading spinner while scanning
     lv_obj_clear_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
     
     // Delay actual scan to allow UI to update first
     lv_timer_t* timer = lv_timer_create([](lv_timer_t* timer) {
         WiFiConfigHelper::scanAndPopulate(ui_wifiNetworksAvailable);
         
         if (ui_wifiLoadingSpinner) {
             lv_obj_add_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
         }
     }, 50, nullptr);
     lv_timer_set_repeat_count(timer, 1);
 }
 
 /**
  * Updates text field with selected WiFi name from dropdown
  */
 extern "C" void selectedWifiSSID(lv_event_t* e) {
     if (!ui_wifiNetworksAvailable || !ui_WifiNameValue) return;
     
     char buf[64];
     lv_roller_get_selected_str(ui_wifiNetworksAvailable, buf, sizeof(buf));
     
     // Only update if valid selection
     if (strcmp(buf, "Scanning...") != 0 && strcmp(buf, "None") != 0) {
         lv_label_set_text(ui_WifiNameValue, buf);
     }
 }
 
 /**
  * Save WiFi settings and attempt connection
  */
 extern "C" void saveWifiConfiguration(lv_event_t* e) {
     (void)e;
     if (!ui_wifiNetworksAvailable || !ui_wifiPassword || !ui_wifiLoadingSpinner) return;
     
     // Show loading spinner while connecting
     lv_obj_clear_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
     
     // Delay connection attempt to allow UI update
     lv_timer_t* timer = lv_timer_create([](lv_timer_t* timer) {
         // Get selected SSID
         char ssid[64] = {0};
         lv_roller_get_selected_str(ui_wifiNetworksAvailable, ssid, sizeof(ssid));
         
         // Skip connection if invalid selection
         if (strcmp(ssid, "Scanning...") == 0 || strcmp(ssid, "None") == 0) {
             if (ui_wifiLoadingSpinner) {
                 lv_obj_add_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
             }
             return;
         }
         
         // Get password
         const char* password = nullptr;
         if (ui_wifiPassword) {
             password = lv_textarea_get_text(ui_wifiPassword);
         }
         
         // Try to connect
         bool connected = WiFiConfigHelper::connect(ssid, password);
         
         // Show connection result
         if (connected) {
             Serial.printf("[WiFi] Connected to %s\n", ssid);
         } else {
             Serial.printf("[WiFi] Failed to connect to %s\n", ssid);
         }
         
         // Hide spinner when done
         if (ui_wifiLoadingSpinner) {
             lv_obj_add_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
         }
         
         // Update all WiFi status icons
         if (ui_wifiLabelisConnected1) update_wifi_status(ui_wifiLabelisConnected1);
         if (ui_wifiLabelisConnected3) update_wifi_status(ui_wifiLabelisConnected3);
         if (ui_wifiLabelisConnected4) update_wifi_status(ui_wifiLabelisConnected4);
         if (ui_wifiLabelisConnected5) update_wifi_status(ui_wifiLabelisConnected5);
         if (ui_wifiLabelisConnected6) update_wifi_status(ui_wifiLabelisConnected6);
         
     }, 50, nullptr);
     lv_timer_set_repeat_count(timer, 1);
 }
 
 /**
  * Delete saved WiFi configuration
  */
 extern "C" void deleteWiFiConfig(lv_event_t* e) {
     (void)e;
     
     // Show loading spinner
     if (ui_wifiLoadingSpinner) {
         lv_obj_clear_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
     }
     
     // Delay to allow UI update before operation
     lv_timer_t* timer = lv_timer_create([](lv_timer_t* timer) {
         // Clear WiFi credentials
         WiFiConfigHelper::clearCredentials();
         
         // Disconnect
         WiFi.disconnect();
         
         // Update UI elements
         if (ui_WifiNameValue) {
             lv_label_set_text(ui_WifiNameValue, "");
         }
         
         if (ui_wifiPassword) {
             lv_textarea_set_text(ui_wifiPassword, "");
         }
         
         // Update all WiFi status icons
         if (ui_wifiLabelisConnected1) update_wifi_status(ui_wifiLabelisConnected1);
         if (ui_wifiLabelisConnected3) update_wifi_status(ui_wifiLabelisConnected3);
         if (ui_wifiLabelisConnected4) update_wifi_status(ui_wifiLabelisConnected4);
         if (ui_wifiLabelisConnected5) update_wifi_status(ui_wifiLabelisConnected5);
         if (ui_wifiLabelisConnected6) update_wifi_status(ui_wifiLabelisConnected6);
         
         // Hide spinner
         if (ui_wifiLoadingSpinner) {
             lv_obj_add_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
         }
     }, 50, nullptr);
     lv_timer_set_repeat_count(timer, 1);
 }
 
 /**
  * Check WiFi status and update the indicator icon
  */
 extern "C" void checkWifiStatus(lv_event_t* e) {
     if (!e) return;
     
     lv_obj_t* label = lv_event_get_target(e);
     update_wifi_status(label);
 }
 
 /**
  * Save keg configuration
  */
 extern "C" void kegConfigSave(lv_event_t* e) {
     (void)e;
     // Get selected keg type from dropdown
     uint16_t idx = lv_dropdown_get_selected(ui_Dropdown1);
     int psi = lv_slider_get_value(ui_psiSlider);
     
     Serial.printf("[KegConfig] Saved: Type=%d, PSI=%d\n", idx, psi);
     
     // Here you would save keg config to preferences
     // Preferences prefs;
     // prefs.begin("keg_config");
     // prefs.putUInt("keg_type", idx);
     // prefs.putUInt("keg_psi", psi);
     // prefs.end();
 }
 
 /**
  * Adjust screen brightness
  */
 extern "C" void changeScreenBrightness(lv_event_t* e) {
     lv_obj_t* slider = lv_event_get_target(e);
     int value = lv_slider_get_value(slider);
     
     Serial.printf("[Brightness] Setting to %d%%\n", value);
     
     // Convert percentage to PWM duty cycle (0-255)
     uint8_t duty = map(value, 0, 100, 0, 255);
     tft.setBrightness(duty);
     
     // Update value label if present
     if (ui_screenBrightnessLabelValue) {
         char buf[8];
         snprintf(buf, sizeof(buf), "%d", value);
         lv_label_set_text(ui_screenBrightnessLabelValue, buf);
     }
 }
 
 //=== UI Initialization ===//
 
 /**
  * Initialize UI events
  * Call this from main setup after ui_init()
  */
 void setup_ui_events() {
     Serial.println("[UI] Setting up events");
     
     // Register QR Code screen event
     if (ui_QRCode) {
         lv_obj_add_event_cb(ui_QRCode, on_QRCodeScreen_load, LV_EVENT_SCREEN_LOADED, nullptr);
     }
     
     // Register WiFi scan button
     if (ui_wifiScanButton) {
         lv_obj_add_event_cb(ui_wifiScanButton, start_wifi_scan, LV_EVENT_CLICKED, nullptr);
     }
     
     // Register WiFi status callbacks
     if (ui_wifiLabelisConnected1) update_wifi_status(ui_wifiLabelisConnected1);
     if (ui_wifiLabelisConnected3) update_wifi_status(ui_wifiLabelisConnected3);
     if (ui_wifiLabelisConnected4) update_wifi_status(ui_wifiLabelisConnected4);
     if (ui_wifiLabelisConnected5) update_wifi_status(ui_wifiLabelisConnected5);
     if (ui_wifiLabelisConnected6) update_wifi_status(ui_wifiLabelisConnected6);
     
     // Register WiFi status change callback
     WiFiConfigHelper::setStatusCallback([](bool connected) {
         Serial.printf("[WiFi] Status changed: %s\n", connected ? "Connected" : "Disconnected");
         
         // Update all WiFi status icons
         if (ui_wifiLabelisConnected1) update_wifi_status(ui_wifiLabelisConnected1);
         if (ui_wifiLabelisConnected3) update_wifi_status(ui_wifiLabelisConnected3);
         if (ui_wifiLabelisConnected4) update_wifi_status(ui_wifiLabelisConnected4);
         if (ui_wifiLabelisConnected5) update_wifi_status(ui_wifiLabelisConnected5);
         if (ui_wifiLabelisConnected6) update_wifi_status(ui_wifiLabelisConnected6);
         
         // Hide spinner if visible
         if (ui_wifiLoadingSpinner) {
             lv_obj_add_flag(ui_wifiLoadingSpinner, LV_OBJ_FLAG_HIDDEN);
         }
     });
 }

 void event_wifiStatusIcon(lv_event_t * e)
{
	// Your code here
}

void event_wifiSpeedTestBtn(lv_event_t * e)
{
	// Your code here
}